# DevMountain Docker Compose Configuration (Development)
# 
# 개발용 구성: Redis, PostgreSQL, Spring Boot App만 포함
# 성능 테스트가 필요한 경우: docker-compose.performance.yaml 사용
#
# 사용법:
# - 개발: docker-compose up
# - 성능 테스트: docker-compose -f docker-compose.performance.yaml up

services:
  redis:
    image: redis:7.2
    container_name: devmountain-redis
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - devmountain-net

  postgres:
    image: ankane/pgvector:latest
    container_name: devmountain-postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - devmountain-postgres-volume:/var/lib/postgresql/data
    networks:
      - devmountain-net
      
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: devmountain-app
    ports:
      - "${APP_PORT}:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      REDIS_HOST: redis
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - redis
      - postgres
    networks:
      - devmountain-net

volumes:
  devmountain-postgres-volume:

networks:
  devmountain-net:
    name: devmountain-net
    driver: bridge
